"""
Django settings for config project.

Generated by 'django-admin startproject' using Django 5.2.7.

For more information on this file, see
https://docs.djangoproject.com/en/5.2/topics/settings/

For the full list of settings and their values, see
https://docs.djangoproject.com/en/5.2/ref/settings/
"""

from pathlib import Path
import environ
import os
import dj_database_url


env = environ.Env(DEBUG=(bool, False))

# Build paths inside the project like this: BASE_DIR / 'subdir'.
BASE_DIR = Path(__file__).resolve().parent.parent

# .env Datei lesen (nur lokal, nicht auf Render)
env_file = os.path.join(BASE_DIR, '.env')
if os.path.exists(env_file):
    environ.Env.read_env(env_file)

# Quick-start development settings - unsuitable for production
# See https://docs.djangoproject.com/en/5.2/howto/deployment/checklist/

# SECURITY WARNING: keep the secret key used in production secret!
SECRET_KEY = env('SECRET_KEY', default='django-insecure-nur-fuer-entwicklung-bitte-aendern')

# SECURITY WARNING: don't run with debug turned on in production!
DEBUG = env.bool('DEBUG', default=False)

ALLOWED_HOSTS = env.list('ALLOWED_HOSTS', default=['localhost', '127.0.0.1'])

# Render.com spezifisch - fügt automatisch die Render-Domain hinzu
RENDER_EXTERNAL_HOSTNAME = os.environ.get('RENDER_EXTERNAL_HOSTNAME')
if RENDER_EXTERNAL_HOSTNAME:
    ALLOWED_HOSTS.append(RENDER_EXTERNAL_HOSTNAME)


# Application definition

INSTALLED_APPS = [
    'django.contrib.admin',
    'django.contrib.auth',
    'django.contrib.contenttypes',
    'django.contrib.sessions',
    'django.contrib.messages',
    'django.contrib.staticfiles',
    'axes', # ← Für Brute-Force Schutz
    'finance',
    'billa',
]

MIDDLEWARE = [
    'django.middleware.security.SecurityMiddleware',
    'whitenoise.middleware.WhiteNoiseMiddleware',  # ← Für Static Files auf Render
    'django.contrib.sessions.middleware.SessionMiddleware',
    'django.middleware.common.CommonMiddleware',
    'django.middleware.csrf.CsrfViewMiddleware',
    'django.contrib.auth.middleware.AuthenticationMiddleware',
    'django.contrib.messages.middleware.MessageMiddleware',
    'django.middleware.clickjacking.XFrameOptionsMiddleware',
    'axes.middleware.AxesMiddleware',  # ← Für Brute-Force Schutz
    'finance.middleware.DeviceAuthenticationMiddleware',  # ← Für Geräte-Authentifizierung
]

ROOT_URLCONF = 'config.urls'

TEMPLATES = [
    {
        'BACKEND': 'django.template.backends.django.DjangoTemplates',
        'DIRS': [BASE_DIR / 'finance' / 'templates'],
        'APP_DIRS': True,
        'OPTIONS': {
            'context_processors': [
                'django.template.context_processors.request',
                'django.contrib.auth.context_processors.auth',
                'django.contrib.messages.context_processors.messages',
            ],
        },
    },
]

WSGI_APPLICATION = 'config.wsgi.application'


# Database
# https://docs.djangoproject.com/en/5.2/ref/settings/#databases

# Unterscheidet zwischen lokalem Development und Production (Render)
if 'DATABASE_URL' in os.environ:
    # PRODUCTION (Render.com) - nutzt DATABASE_URL
    DATABASES = {
        'default': dj_database_url.config(
            conn_max_age=600,
            conn_health_checks=True,
            ssl_require=True
        )
    }
    # Füge dein PostgreSQL Schema hinzu
    DATABASES['default']['OPTIONS'] = {
        'options': '-c search_path=finance,public'
    }
else:
    # DEVELOPMENT (lokal) - nutzt .env Variablen für PostgreSQL
    DATABASES = {
        'default': {
            'ENGINE': env('DB_ENGINE', default='django.db.backends.postgresql'),
            'NAME': env('DB_NAME'),
            'USER': env('DB_USER'),
            'PASSWORD': env.get_value('DB_PASSWORD', default=''),
            'HOST': env('DB_HOST', default='localhost'),
            'PORT': env('DB_PORT', default='5432'),
            'OPTIONS': {
                'options': '-c search_path=finance,public'
            }
        }
    }


# Password validation
# https://docs.djangoproject.com/en/5.2/ref/settings/#auth-password-validators

AUTH_PASSWORD_VALIDATORS = [
    {'NAME': 'django.contrib.auth.password_validation.UserAttributeSimilarityValidator'},
    {'NAME': 'django.contrib.auth.password_validation.MinimumLengthValidator'},
    {'NAME': 'django.contrib.auth.password_validation.CommonPasswordValidator'},
    {'NAME': 'django.contrib.auth.password_validation.NumericPasswordValidator'},
]

# ===== AXES CONFIGURATION (Rate Limiting) =====
AUTHENTICATION_BACKENDS = [
    'axes.backends.AxesStandaloneBackend',  # ← NEU: Axes Backend
    'django.contrib.auth.backends.ModelBackend',
]

# Axes Settings
AXES_FAILURE_LIMIT = 5  # Nach 5 fehlgeschlagenen Login-Versuchen sperren
AXES_COOLOFF_TIME = 1  # 1 Stunde Sperre (in Stunden)
AXES_RESET_ON_SUCCESS = True  # Reset Counter nach erfolgreichem Login
AXES_LOCKOUT_TEMPLATE = None  # Nutzt Default-Fehlerseite
AXES_LOCKOUT_PARAMETERS = [['username', 'ip_address']]  # Tracking nach Username & IP
AXES_IPWARE_PROXY_COUNT = 1  # Für Render (hinter Proxy)
AXES_IPWARE_META_PRECEDENCE_ORDER = [
    'HTTP_X_FORWARDED_FOR',  # Für Render/nginx
    'REMOTE_ADDR',
]

# Optional: Verbose Logging für Axes (nur bei DEBUG=True)
if DEBUG:
    AXES_VERBOSE = True
# ===== END AXES CONFIGURATION =====


# Internationalization
# https://docs.djangoproject.com/en/5.2/topics/i18n/

LANGUAGE_CODE = 'de-de'
TIME_ZONE = 'Europe/Vienna'
USE_I18N = True
USE_TZ = True


# Static files (CSS, JavaScript, Images)
# https://docs.djangoproject.com/en/5.2/howto/static-files/

STATIC_URL = '/static/'
STATIC_ROOT = BASE_DIR / 'staticfiles'  # ← Für collectstatic
STATICFILES_DIRS = [BASE_DIR / 'static']

# WhiteNoise - für effizientes Serving von Static Files
STATICFILES_STORAGE = 'whitenoise.storage.CompressedManifestStaticFilesStorage'


# Default primary key field type
# https://docs.djangoproject.com/en/5.2/ref/settings/#default-auto-field

DEFAULT_AUTO_FIELD = 'django.db.models.BigAutoField'


# Security Settings für Production
if not DEBUG:
    SECURE_SSL_REDIRECT = True
    SESSION_COOKIE_SECURE = True
    CSRF_COOKIE_SECURE = True
    SECURE_BROWSER_XSS_FILTER = True
    SECURE_CONTENT_TYPE_NOSNIFF = True
    SECURE_HSTS_SECONDS = 31536000
    SECURE_HSTS_INCLUDE_SUBDOMAINS = True
    SECURE_HSTS_PRELOAD = True
    X_FRAME_OPTIONS = 'DENY'


# CSRF Settings für Render
CSRF_TRUSTED_ORIGINS = env.list(
    'CSRF_TRUSTED_ORIGINS',
    default=['https://*.onrender.com']
)


# Login/Logout URLs
LOGIN_URL = '/login/'
LOGIN_REDIRECT_URL = '/'
LOGOUT_REDIRECT_URL = '/login/'


# Session Settings
SESSION_COOKIE_AGE = 86400  # 24 Stunden
SESSION_SAVE_EVERY_REQUEST = True


# Logging - hilfreich für Debugging auf Render
LOGGING = {
    'version': 1,
    'disable_existing_loggers': False,
    'formatters': {
        'verbose': {
            'format': '{levelname} {asctime} {module} {message}',
            'style': '{',
        },
    },
    'handlers': {
        'console': {
            'class': 'logging.StreamHandler',
            'formatter': 'verbose',
        },
    },
    'root': {
        'handlers': ['console'],
        'level': 'INFO',
    },
    'loggers': {
        'django': {
            'handlers': ['console'],
            'level': 'INFO',
            'propagate': False,
        },
    },
}


CRON_SECRET_TOKEN = os.environ.get('CRON_SECRET_TOKEN')
if not CRON_SECRET_TOKEN and not DEBUG:
    raise ValueError("CRON_SECRET_TOKEN muss als Environment Variable gesetzt sein!")


# Media Files (für Uploads)
MEDIA_URL = '/media/'
MEDIA_ROOT = BASE_DIR / 'media'

# File Upload Settings
FILE_UPLOAD_MAX_MEMORY_SIZE = 10485760  # 10MB

# ========================================
# CLOUDFLARE R2 STORAGE
# ========================================

# R2 als Default Storage (optional - siehe unten)
USE_R2_STORAGE = os.environ.get('USE_R2_STORAGE', 'False') == 'True'

if USE_R2_STORAGE:
    # R2 Credentials
    AWS_ACCESS_KEY_ID = os.environ.get('R2_ACCESS_KEY_ID')
    AWS_SECRET_ACCESS_KEY = os.environ.get('R2_SECRET_ACCESS_KEY')
    AWS_STORAGE_BUCKET_NAME = os.environ.get('R2_BUCKET_NAME', 'billainvoices')
    AWS_S3_ENDPOINT_URL = os.environ.get('R2_ENDPOINT_URL')

    # R2-spezifische Settings
    AWS_S3_REGION_NAME = 'auto'  # R2 nutzt 'auto'
    AWS_S3_SIGNATURE_VERSION = 's3v4'

    # Security & Performance
    AWS_DEFAULT_ACL = None  # Bucket-Default nutzen
    AWS_S3_FILE_OVERWRITE = False  # Keine Überschreibungen
    AWS_QUERYSTRING_AUTH = True  # Signierte URLs
    AWS_S3_MAX_MEMORY_SIZE = 100 * 1024 * 1024  # 100 MB

    # Storage Backend
    DEFAULT_FILE_STORAGE = 'storages.backends.s3boto3.S3Boto3Storage'
