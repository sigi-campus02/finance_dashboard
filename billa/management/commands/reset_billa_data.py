# finance/management/commands/reset_billa_data.py

from django.core.management.base import BaseCommand
from django.db import transaction
from billa.models import (
    BillaEinkauf, BillaArtikel, BillaProdukt,
    BillaPreisHistorie, BillaFiliale
)


class Command(BaseCommand):
    help = 'L√∂scht alle Billa-Transaktionsdaten (beh√§lt Filialen-Stammdaten)'

    def add_arguments(self, parser):
        parser.add_argument(
            '--keep-products',
            action='store_true',
            help='Behalte Produkte (nur Eink√§ufe/Artikel/Historie l√∂schen)',
        )
        parser.add_argument(
            '--delete-filialen',
            action='store_true',
            help='ACHTUNG: L√∂scht auch Filialen-Stammdaten!',
        )
        parser.add_argument(
            '--no-input',
            action='store_true',
            help='Keine Best√§tigung erforderlich',
        )

    def handle(self, *args, **options):
        keep_products = options['keep_products']
        delete_filialen = options['delete_filialen']
        no_input = options['no_input']

        # Z√§hle vorhandene Daten
        einkauf_count = BillaEinkauf.objects.count()
        artikel_count = BillaArtikel.objects.count()
        produkt_count = BillaProdukt.objects.count()
        historie_count = BillaPreisHistorie.objects.count()
        filiale_count = BillaFiliale.objects.count()

        self.stdout.write('=' * 70)
        self.stdout.write(self.style.WARNING('‚ö†Ô∏è  WARNUNG: Billa-Daten werden gel√∂scht!'))
        self.stdout.write('=' * 70)
        self.stdout.write(f'\nüìä Folgende Daten werden gel√∂scht:')
        self.stdout.write(f'   ‚Ä¢ {einkauf_count:,} Eink√§ufe')
        self.stdout.write(f'   ‚Ä¢ {artikel_count:,} Artikel')
        self.stdout.write(f'   ‚Ä¢ {historie_count:,} Preishistorie-Eintr√§ge')

        if keep_products:
            self.stdout.write(f'   ‚Ä¢ {produkt_count:,} Produkte (BLEIBEN ERHALTEN)')
        else:
            self.stdout.write(f'   ‚Ä¢ {produkt_count:,} Produkte')

        if delete_filialen:
            self.stdout.write(self.style.ERROR(f'   ‚Ä¢ {filiale_count:,} Filialen (STAMMDATEN!)'))
        else:
            self.stdout.write(f'   ‚Ä¢ {filiale_count:,} Filialen (BLEIBEN ERHALTEN)')

        # Warnung wenn Filialen gel√∂scht werden sollen
        if delete_filialen:
            self.stdout.write('\n' + self.style.ERROR('‚ö†Ô∏è  ACHTUNG: Du hast --delete-filialen gesetzt!'))
            self.stdout.write(self.style.ERROR('    Filialen sind Stammdaten und sollten normalerweise'))
            self.stdout.write(self.style.ERROR('    NICHT gel√∂scht werden!'))

        if not no_input:
            self.stdout.write('\n' + '=' * 70)
            if delete_filialen:
                confirm = input('‚ö†Ô∏è  Wirklich ALLES inkl. Filialen l√∂schen? (L√ñSCHE ALLES/nein): ')
                if confirm != 'L√ñSCHE ALLES':
                    self.stdout.write(self.style.ERROR('‚ùå Abgebrochen.'))
                    return
            else:
                confirm = input('M√∂chtest du die Transaktionsdaten l√∂schen? (ja/nein): ')
                if confirm.lower() not in ['ja', 'yes', 'j', 'y']:
                    self.stdout.write(self.style.ERROR('‚ùå Abgebrochen.'))
                    return

        # L√∂sche Daten in der richtigen Reihenfolge (wegen Foreign Keys)
        try:
            with transaction.atomic():
                self.stdout.write('\nüóëÔ∏è  L√∂sche Daten...\n')

                deleted_counts = {}

                # 1. Preishistorie (h√§ngt von Artikel, Produkt und Filiale ab)
                deleted_historie = BillaPreisHistorie.objects.all().delete()
                deleted_counts['historie'] = deleted_historie[0]
                self.stdout.write(
                    self.style.SUCCESS(f'   ‚úì {deleted_historie[0]:,} Preishistorie-Eintr√§ge gel√∂scht')
                )

                # 2. Artikel (h√§ngt von Einkauf und Produkt ab)
                deleted_artikel = BillaArtikel.objects.all().delete()
                deleted_counts['artikel'] = deleted_artikel[0]
                self.stdout.write(
                    self.style.SUCCESS(f'   ‚úì {deleted_artikel[0]:,} Artikel gel√∂scht')
                )

                # 3. Eink√§ufe (h√§ngt von Filiale ab)
                deleted_einkauf = BillaEinkauf.objects.all().delete()
                deleted_counts['einkauf'] = deleted_einkauf[0]
                self.stdout.write(
                    self.style.SUCCESS(f'   ‚úì {deleted_einkauf[0]:,} Eink√§ufe gel√∂scht')
                )

                # 4. Optional: Produkte l√∂schen
                if not keep_products:
                    deleted_produkt = BillaProdukt.objects.all().delete()
                    deleted_counts['produkt'] = deleted_produkt[0]
                    self.stdout.write(
                        self.style.SUCCESS(f'   ‚úì {deleted_produkt[0]:,} Produkte gel√∂scht')
                    )
                else:
                    self.stdout.write(
                        self.style.WARNING(f'   ‚äò {produkt_count:,} Produkte beibehalten')
                    )

                # 5. Optional: Filialen l√∂schen (NUR wenn explizit gew√ºnscht!)
                if delete_filialen:
                    deleted_filialen = BillaFiliale.objects.all().delete()
                    deleted_counts['filialen'] = deleted_filialen[0]
                    self.stdout.write(
                        self.style.ERROR(f'   ‚úó {deleted_filialen[0]:,} Filialen gel√∂scht')
                    )
                else:
                    self.stdout.write(
                        self.style.SUCCESS(f'   ‚úì {filiale_count:,} Filialen beibehalten (Stammdaten)')
                    )

            # Zusammenfassung
            self.stdout.write('\n' + '=' * 70)
            self.stdout.write(self.style.SUCCESS('‚úÖ Billa-Daten erfolgreich gel√∂scht!'))
            self.stdout.write('=' * 70)

            total_deleted = sum(deleted_counts.values())
            self.stdout.write(f'\nüìä Zusammenfassung:')
            self.stdout.write(f'   Gesamt gel√∂scht: {total_deleted:,} Datens√§tze')

            if not delete_filialen:
                self.stdout.write(f'   Filialen behalten: {filiale_count:,}')

            if keep_products:
                self.stdout.write(f'   Produkte behalten: {produkt_count:,}')

            self.stdout.write('\nüí° N√§chste Schritte:')
            if delete_filialen:
                self.stdout.write('   1. Filialen neu anlegen:')
                self.stdout.write('      python manage.py update_filialen')
                self.stdout.write('   2. Rechnungen importieren:')
                self.stdout.write('      python manage.py import_billa /pfad/zu/pdfs/')
            else:
                self.stdout.write('   Rechnungen neu importieren:')
                self.stdout.write('   python manage.py import_billa /pfad/zu/pdfs/')

            self.stdout.write('')

        except Exception as e:
            self.stdout.write(self.style.ERROR(f'\n‚ùå Fehler beim L√∂schen: {str(e)}'))
            self.stdout.write(self.style.ERROR('   Transaktion wurde zur√ºckgerollt.'))
            raise