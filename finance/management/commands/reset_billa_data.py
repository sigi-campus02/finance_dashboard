# finance/management/commands/reset_billa_data.py

from django.core.management.base import BaseCommand
from finance.models import BillaEinkauf, BillaArtikel, BillaProdukt, BillaPreisHistorie, BillaKategorieMapping
from django.db import transaction


class Command(BaseCommand):
    help = 'L√∂scht alle Billa-Daten aus der Datenbank'

    def add_arguments(self, parser):
        parser.add_argument(
            '--keep-mappings',
            action='store_true',
            help='Behalte Kategorie-Mappings (werden nicht gel√∂scht)',
        )
        parser.add_argument(
            '--no-input',
            action='store_true',
            help='Keine Best√§tigung erforderlich',
        )

    def handle(self, *args, **options):
        keep_mappings = options['keep_mappings']
        no_input = options['no_input']

        # Z√§hle vorhandene Daten
        einkauf_count = BillaEinkauf.objects.count()
        artikel_count = BillaArtikel.objects.count()
        produkt_count = BillaProdukt.objects.count()
        historie_count = BillaPreisHistorie.objects.count()
        mapping_count = BillaKategorieMapping.objects.count()

        self.stdout.write('=' * 70)
        self.stdout.write(self.style.WARNING('‚ö†Ô∏è  WARNUNG: Alle Billa-Daten werden gel√∂scht!'))
        self.stdout.write('=' * 70)
        self.stdout.write(f'\nüìä Folgende Daten werden gel√∂scht:')
        self.stdout.write(f'   ‚Ä¢ {einkauf_count:,} Eink√§ufe')
        self.stdout.write(f'   ‚Ä¢ {artikel_count:,} Artikel')
        self.stdout.write(f'   ‚Ä¢ {produkt_count:,} Produkte')
        self.stdout.write(f'   ‚Ä¢ {historie_count:,} Preishistorie-Eintr√§ge')

        if not keep_mappings:
            self.stdout.write(f'   ‚Ä¢ {mapping_count:,} Kategorie-Mappings')
        else:
            self.stdout.write(f'   ‚Ä¢ {mapping_count:,} Kategorie-Mappings (BLEIBEN ERHALTEN)')

        if not no_input:
            self.stdout.write('\n' + '=' * 70)
            confirm = input('M√∂chtest du wirklich ALLE Daten l√∂schen? (ja/nein): ')
            if confirm.lower() not in ['ja', 'yes', 'j', 'y']:
                self.stdout.write(self.style.ERROR('‚ùå Abgebrochen.'))
                return

        # L√∂sche Daten in der richtigen Reihenfolge (wegen Foreign Keys)
        try:
            with transaction.atomic():
                self.stdout.write('\nüóëÔ∏è  L√∂sche Daten...')

                # 1. Preishistorie (h√§ngt von Artikel und Produkt ab)
                deleted_historie = BillaPreisHistorie.objects.all().delete()
                self.stdout.write(f'   ‚úì {deleted_historie[0]:,} Preishistorie-Eintr√§ge gel√∂scht')

                # 2. Artikel (h√§ngt von Einkauf und Produkt ab)
                deleted_artikel = BillaArtikel.objects.all().delete()
                self.stdout.write(f'   ‚úì {deleted_artikel[0]:,} Artikel gel√∂scht')

                # 3. Eink√§ufe
                deleted_einkauf = BillaEinkauf.objects.all().delete()
                self.stdout.write(f'   ‚úì {deleted_einkauf[0]:,} Eink√§ufe gel√∂scht')

                # 4. Produkte
                deleted_produkt = BillaProdukt.objects.all().delete()
                self.stdout.write(f'   ‚úì {deleted_produkt[0]:,} Produkte gel√∂scht')

                # 5. Optional: Kategorie-Mappings
                if not keep_mappings:
                    deleted_mappings = BillaKategorieMapping.objects.all().delete()
                    self.stdout.write(f'   ‚úì {deleted_mappings[0]:,} Kategorie-Mappings gel√∂scht')

            self.stdout.write('\n' + '=' * 70)
            self.stdout.write(self.style.SUCCESS('‚úÖ Alle Billa-Daten wurden erfolgreich gel√∂scht!'))
            self.stdout.write('=' * 70)
            self.stdout.write('\nüí° Jetzt kannst du die Rechnungen neu importieren:')
            self.stdout.write('   python manage.py reimport_all_billa\n')

        except Exception as e:
            self.stdout.write(self.style.ERROR(f'\n‚ùå Fehler beim L√∂schen: {str(e)}'))
            raise